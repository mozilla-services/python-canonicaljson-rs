name: Publish wheels

on:
  push:
    tags:
      - v*
  pull_request:
    paths:
      - 'Cargo.toml'
      - 'pyproject.toml'

jobs:
  build:
    # This workflow comes from https://github.com/pydantic/pydantic-core/blob/main/.github/workflows/ci.yml
    name: build on ${{ matrix.platform || matrix.os }} (${{ matrix.target }} - ${{ matrix.manylinux || 'auto' }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        target: [x86_64, aarch64]
        # https://github.com/pypa/manylinux#readme
        manylinux: [auto]
        include:
          - os: windows
            ls: dir
            interpreter: 3.7 3.8 3.9 3.10 3.11
          - os: windows
            ls: dir
            target: i686
            python-architecture: x86
            interpreter: 3.7 3.8 3.9 3.10 3.11
          - os: macos
            target: aarch64
            interpreter: 3.7 3.8 3.9 3.10 3.11
          # Build all manylinux targets on 2_24
          # https://github.com/PyO3/maturin-action/blob/135c746/src/index.ts#L33
          # Because GCC 4.8.5 in manylinux2014 container doesn't support c11 atomic
          - os: ubuntu
            platform: linux
            manylinux: 2_24
          - os: ubuntu
            platform: linux
            target: i686
          - os: ubuntu
            platform: linux
            target: armv7
            interpreter: 3.7 3.8 3.9 3.10 3.11
          - os: ubuntu
            platform: linux
            target: ppc64le
            interpreter: 3.7 3.8 3.9 3.10 3.11
          - os: ubuntu
            platform: linux
            target: s390x
            interpreter: 3.7 3.8 3.9 3.10 3.11
          # musllinux
          - os: ubuntu
            platform: linux
            target: x86_64
            manylinux: musllinux_1_1
          - os: ubuntu
            platform: linux
            target: aarch64
            manylinux: musllinux_1_1
        exclude:
          # Windows on arm64 only supports Python 3.11+
          - os: windows
            target: aarch64

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: ${{ matrix.python-architecture || 'x64' }}

      - run: pip install -U twine

      - name: build sdist
        if: ${{ matrix.os == 'ubuntu' && matrix.target == 'x86_64' && matrix.manylinux == 'auto' }}
        uses: messense/maturin-action@v1
        with:
          command: sdist
          args: --out dist/
          rust-toolchain: stable

      - name: build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux || 'auto' }}
          container: ${{ matrix.container }}
          args: --release --out dist/ --interpreter ${{ matrix.interpreter || '3.7 3.8 3.9 3.10 3.11 pypy3.7 pypy3.8 pypy3.9' }}
          rust-toolchain: stable

      - run: ${{ matrix.ls || 'ls -lh' }} dist/

      - run: twine check --strict dist/*

      - name: Install built wheel
        if: ${{ matrix.os == 'ubuntu' && matrix.target == 'x86_64' && matrix.manylinux == 'auto' }}
        run: |
          pip install canonicaljson-rs --no-index --find-links dist/ --force-reinstall
          python -c "import canonicaljson"

      - uses: actions/upload-artifact@v3
        with:
          name: pypi_files
          path: dist/
